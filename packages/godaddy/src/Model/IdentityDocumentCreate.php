<?php
/**
 * IdentityDocumentCreate
 *
 * PHP version 5
 *
 * @category Class
 * @package  GoDaddyDomainsClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.4.8
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace GoDaddyDomainsClient\Model;

use \ArrayAccess;

/**
 * IdentityDocumentCreate Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     GoDaddyDomainsClient
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class IdentityDocumentCreate implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'IdentityDocumentCreate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'identification_type' => 'string',
        'domain' => 'string',
        'legal_entity_name' => 'string',
        'identification_number' => 'string',
        'image' => 'string',
        'consent' => '\GoDaddyDomainsClient\Model\Consent'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'identification_type' => 'identificationType',
        'domain' => 'domain',
        'legal_entity_name' => 'legalEntityName',
        'identification_number' => 'identificationNumber',
        'image' => 'image',
        'consent' => 'consent'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'identification_type' => 'setIdentificationType',
        'domain' => 'setDomain',
        'legal_entity_name' => 'setLegalEntityName',
        'identification_number' => 'setIdentificationNumber',
        'image' => 'setImage',
        'consent' => 'setConsent'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'identification_type' => 'getIdentificationType',
        'domain' => 'getDomain',
        'legal_entity_name' => 'getLegalEntityName',
        'identification_number' => 'getIdentificationNumber',
        'image' => 'getImage',
        'consent' => 'getConsent'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const IDENTIFICATION_TYPE_BUSINESS_LICENSE_CHINA = 'BUSINESS_LICENSE_CHINA';
    const IDENTIFICATION_TYPE_BUSINESS_LICENSE_HONG_KONG = 'BUSINESS_LICENSE_HONG_KONG';
    const IDENTIFICATION_TYPE_BUSINESS_LICENSE_MACAU = 'BUSINESS_LICENSE_MACAU';
    const IDENTIFICATION_TYPE_BUSINESS_LICENSE_SINGAPORE = 'BUSINESS_LICENSE_SINGAPORE';
    const IDENTIFICATION_TYPE_BUSINESS_LICENSE_TAIWAN = 'BUSINESS_LICENSE_TAIWAN';
    const IDENTIFICATION_TYPE_DRIVERS_LICENSE = 'DRIVERS_LICENSE';
    const IDENTIFICATION_TYPE_DRIVERS_LICENSE_HONG_KONG = 'DRIVERS_LICENSE_HONG_KONG';
    const IDENTIFICATION_TYPE_DRIVERS_LICENSE_MACAU = 'DRIVERS_LICENSE_MACAU';
    const IDENTIFICATION_TYPE_DRIVERS_LICENSE_SINGAPORE = 'DRIVERS_LICENSE_SINGAPORE';
    const IDENTIFICATION_TYPE_DRIVERS_LICENSE_TAIWAN = 'DRIVERS_LICENSE_TAIWAN';
    const IDENTIFICATION_TYPE_ORGANIZATION_CODE_CERTIFICATE_CHINA = 'ORGANIZATION_CODE_CERTIFICATE_CHINA';
    const IDENTIFICATION_TYPE_PASSPORT = 'PASSPORT';
    const IDENTIFICATION_TYPE_PASSPORT_HONG_KONG = 'PASSPORT_HONG_KONG';
    const IDENTIFICATION_TYPE_PASSPORT_MACAU = 'PASSPORT_MACAU';
    const IDENTIFICATION_TYPE_PASSPORT_SINGAPORE = 'PASSPORT_SINGAPORE';
    const IDENTIFICATION_TYPE_RESIDENT_ID_CHINA = 'RESIDENT_ID_CHINA';
    const IDENTIFICATION_TYPE_RESIDENT_ID_HONG_KONG = 'RESIDENT_ID_HONG_KONG';
    const IDENTIFICATION_TYPE_RESIDENT_ID_MACAU = 'RESIDENT_ID_MACAU';
    const IDENTIFICATION_TYPE_RESIDENT_ID_TAIWAN = 'RESIDENT_ID_TAIWAN';
    const IDENTIFICATION_TYPE_RESIDENT_ID_TEMPORARY_CHINA = 'RESIDENT_ID_TEMPORARY_CHINA';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getIdentificationTypeAllowableValues()
    {
        return [
            self::IDENTIFICATION_TYPE_BUSINESS_LICENSE_CHINA,
            self::IDENTIFICATION_TYPE_BUSINESS_LICENSE_HONG_KONG,
            self::IDENTIFICATION_TYPE_BUSINESS_LICENSE_MACAU,
            self::IDENTIFICATION_TYPE_BUSINESS_LICENSE_SINGAPORE,
            self::IDENTIFICATION_TYPE_BUSINESS_LICENSE_TAIWAN,
            self::IDENTIFICATION_TYPE_DRIVERS_LICENSE,
            self::IDENTIFICATION_TYPE_DRIVERS_LICENSE_HONG_KONG,
            self::IDENTIFICATION_TYPE_DRIVERS_LICENSE_MACAU,
            self::IDENTIFICATION_TYPE_DRIVERS_LICENSE_SINGAPORE,
            self::IDENTIFICATION_TYPE_DRIVERS_LICENSE_TAIWAN,
            self::IDENTIFICATION_TYPE_ORGANIZATION_CODE_CERTIFICATE_CHINA,
            self::IDENTIFICATION_TYPE_PASSPORT,
            self::IDENTIFICATION_TYPE_PASSPORT_HONG_KONG,
            self::IDENTIFICATION_TYPE_PASSPORT_MACAU,
            self::IDENTIFICATION_TYPE_PASSPORT_SINGAPORE,
            self::IDENTIFICATION_TYPE_RESIDENT_ID_CHINA,
            self::IDENTIFICATION_TYPE_RESIDENT_ID_HONG_KONG,
            self::IDENTIFICATION_TYPE_RESIDENT_ID_MACAU,
            self::IDENTIFICATION_TYPE_RESIDENT_ID_TAIWAN,
            self::IDENTIFICATION_TYPE_RESIDENT_ID_TEMPORARY_CHINA,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['identification_type'] = isset($data['identification_type']) ? $data['identification_type'] : null;
        $this->container['domain'] = isset($data['domain']) ? $data['domain'] : null;
        $this->container['legal_entity_name'] = isset($data['legal_entity_name']) ? $data['legal_entity_name'] : null;
        $this->container['identification_number'] = isset($data['identification_number']) ? $data['identification_number'] : null;
        $this->container['image'] = isset($data['image']) ? $data['image'] : null;
        $this->container['consent'] = isset($data['consent']) ? $data['consent'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['identification_type'] === null) {
            $invalid_properties[] = "'identification_type' can't be null";
        }
        $allowed_values = array("BUSINESS_LICENSE_CHINA", "BUSINESS_LICENSE_HONG_KONG", "BUSINESS_LICENSE_MACAU", "BUSINESS_LICENSE_SINGAPORE", "BUSINESS_LICENSE_TAIWAN", "DRIVERS_LICENSE", "DRIVERS_LICENSE_HONG_KONG", "DRIVERS_LICENSE_MACAU", "DRIVERS_LICENSE_SINGAPORE", "DRIVERS_LICENSE_TAIWAN", "ORGANIZATION_CODE_CERTIFICATE_CHINA", "PASSPORT", "PASSPORT_HONG_KONG", "PASSPORT_MACAU", "PASSPORT_SINGAPORE", "RESIDENT_ID_CHINA", "RESIDENT_ID_HONG_KONG", "RESIDENT_ID_MACAU", "RESIDENT_ID_TAIWAN", "RESIDENT_ID_TEMPORARY_CHINA");
        if (!in_array($this->container['identification_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'identification_type', must be one of #{allowed_values}.";
        }

        if ($this->container['domain'] === null) {
            $invalid_properties[] = "'domain' can't be null";
        }
        if ($this->container['legal_entity_name'] === null) {
            $invalid_properties[] = "'legal_entity_name' can't be null";
        }
        if ($this->container['identification_number'] === null) {
            $invalid_properties[] = "'identification_number' can't be null";
        }
        if ($this->container['image'] === null) {
            $invalid_properties[] = "'image' can't be null";
        }
        if ($this->container['consent'] === null) {
            $invalid_properties[] = "'consent' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['identification_type'] === null) {
            return false;
        }
        $allowed_values = array("BUSINESS_LICENSE_CHINA", "BUSINESS_LICENSE_HONG_KONG", "BUSINESS_LICENSE_MACAU", "BUSINESS_LICENSE_SINGAPORE", "BUSINESS_LICENSE_TAIWAN", "DRIVERS_LICENSE", "DRIVERS_LICENSE_HONG_KONG", "DRIVERS_LICENSE_MACAU", "DRIVERS_LICENSE_SINGAPORE", "DRIVERS_LICENSE_TAIWAN", "ORGANIZATION_CODE_CERTIFICATE_CHINA", "PASSPORT", "PASSPORT_HONG_KONG", "PASSPORT_MACAU", "PASSPORT_SINGAPORE", "RESIDENT_ID_CHINA", "RESIDENT_ID_HONG_KONG", "RESIDENT_ID_MACAU", "RESIDENT_ID_TAIWAN", "RESIDENT_ID_TEMPORARY_CHINA");
        if (!in_array($this->container['identification_type'], $allowed_values)) {
            return false;
        }
        if ($this->container['domain'] === null) {
            return false;
        }
        if ($this->container['legal_entity_name'] === null) {
            return false;
        }
        if ($this->container['identification_number'] === null) {
            return false;
        }
        if ($this->container['image'] === null) {
            return false;
        }
        if ($this->container['consent'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets identification_type
     * @return string
     */
    public function getIdentificationType()
    {
        return $this->container['identification_type'];
    }

    /**
     * Sets identification_type
     * @param string $identification_type
     * @return $this
     */
    public function setIdentificationType($identification_type)
    {
        $allowed_values = array('BUSINESS_LICENSE_CHINA', 'BUSINESS_LICENSE_HONG_KONG', 'BUSINESS_LICENSE_MACAU', 'BUSINESS_LICENSE_SINGAPORE', 'BUSINESS_LICENSE_TAIWAN', 'DRIVERS_LICENSE', 'DRIVERS_LICENSE_HONG_KONG', 'DRIVERS_LICENSE_MACAU', 'DRIVERS_LICENSE_SINGAPORE', 'DRIVERS_LICENSE_TAIWAN', 'ORGANIZATION_CODE_CERTIFICATE_CHINA', 'PASSPORT', 'PASSPORT_HONG_KONG', 'PASSPORT_MACAU', 'PASSPORT_SINGAPORE', 'RESIDENT_ID_CHINA', 'RESIDENT_ID_HONG_KONG', 'RESIDENT_ID_MACAU', 'RESIDENT_ID_TAIWAN', 'RESIDENT_ID_TEMPORARY_CHINA');
        if (!in_array($identification_type, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'identification_type', must be one of 'BUSINESS_LICENSE_CHINA', 'BUSINESS_LICENSE_HONG_KONG', 'BUSINESS_LICENSE_MACAU', 'BUSINESS_LICENSE_SINGAPORE', 'BUSINESS_LICENSE_TAIWAN', 'DRIVERS_LICENSE', 'DRIVERS_LICENSE_HONG_KONG', 'DRIVERS_LICENSE_MACAU', 'DRIVERS_LICENSE_SINGAPORE', 'DRIVERS_LICENSE_TAIWAN', 'ORGANIZATION_CODE_CERTIFICATE_CHINA', 'PASSPORT', 'PASSPORT_HONG_KONG', 'PASSPORT_MACAU', 'PASSPORT_SINGAPORE', 'RESIDENT_ID_CHINA', 'RESIDENT_ID_HONG_KONG', 'RESIDENT_ID_MACAU', 'RESIDENT_ID_TAIWAN', 'RESIDENT_ID_TEMPORARY_CHINA'");
        }
        $this->container['identification_type'] = $identification_type;

        return $this;
    }

    /**
     * Gets domain
     * @return string
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     * @param string $domain Domain for which Real Name Validation must be completed
     * @return $this
     */
    public function setDomain($domain)
    {
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets legal_entity_name
     * @return string
     */
    public function getLegalEntityName()
    {
        return $this->container['legal_entity_name'];
    }

    /**
     * Sets legal_entity_name
     * @param string $legal_entity_name Individual or business name written on the document. Must match image exactly
     * @return $this
     */
    public function setLegalEntityName($legal_entity_name)
    {
        $this->container['legal_entity_name'] = $legal_entity_name;

        return $this;
    }

    /**
     * Gets identification_number
     * @return string
     */
    public function getIdentificationNumber()
    {
        return $this->container['identification_number'];
    }

    /**
     * Sets identification_number
     * @param string $identification_number Individual or business identification number written on the document. Must match image exactly
     * @return $this
     */
    public function setIdentificationNumber($identification_number)
    {
        $this->container['identification_number'] = $identification_number;

        return $this;
    }

    /**
     * Gets image
     * @return string
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     * @param string $image The base64 encoded string of the document image. The document image must be in JPEG format with a file size between 4KB and 2MB
     * @return $this
     */
    public function setImage($image)
    {
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets consent
     * @return \GoDaddyDomainsClient\Model\Consent
     */
    public function getConsent()
    {
        return $this->container['consent'];
    }

    /**
     * Sets consent
     * @param \GoDaddyDomainsClient\Model\Consent $consent
     * @return $this
     */
    public function setConsent($consent)
    {
        $this->container['consent'] = $consent;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\GoDaddyDomainsClient\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\GoDaddyDomainsClient\ObjectSerializer::sanitizeForSerialization($this));
    }
}


