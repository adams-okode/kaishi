<?php
/**
 * Contact
 *
 * PHP version 5
 *
 * @category Class
 * @package  GoDaddyDomainsClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.4.8
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace GoDaddyDomainsClient\Model;

use \ArrayAccess;

/**
 * Contact Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     GoDaddyDomainsClient
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Contact implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Contact';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'name_first' => 'string',
        'name_middle' => 'string',
        'name_last' => 'string',
        'organization' => 'string',
        'job_title' => 'string',
        'email' => 'string',
        'phone' => 'string',
        'fax' => 'string',
        'address_mailing' => '\GoDaddyDomainsClient\Model\Address'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'name_first' => 'nameFirst',
        'name_middle' => 'nameMiddle',
        'name_last' => 'nameLast',
        'organization' => 'organization',
        'job_title' => 'jobTitle',
        'email' => 'email',
        'phone' => 'phone',
        'fax' => 'fax',
        'address_mailing' => 'addressMailing'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'name_first' => 'setNameFirst',
        'name_middle' => 'setNameMiddle',
        'name_last' => 'setNameLast',
        'organization' => 'setOrganization',
        'job_title' => 'setJobTitle',
        'email' => 'setEmail',
        'phone' => 'setPhone',
        'fax' => 'setFax',
        'address_mailing' => 'setAddressMailing'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'name_first' => 'getNameFirst',
        'name_middle' => 'getNameMiddle',
        'name_last' => 'getNameLast',
        'organization' => 'getOrganization',
        'job_title' => 'getJobTitle',
        'email' => 'getEmail',
        'phone' => 'getPhone',
        'fax' => 'getFax',
        'address_mailing' => 'getAddressMailing'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name_first'] = isset($data['name_first']) ? $data['name_first'] : null;
        $this->container['name_middle'] = isset($data['name_middle']) ? $data['name_middle'] : null;
        $this->container['name_last'] = isset($data['name_last']) ? $data['name_last'] : null;
        $this->container['organization'] = isset($data['organization']) ? $data['organization'] : null;
        $this->container['job_title'] = isset($data['job_title']) ? $data['job_title'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['fax'] = isset($data['fax']) ? $data['fax'] : null;
        $this->container['address_mailing'] = isset($data['address_mailing']) ? $data['address_mailing'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['name_first'] === null) {
            $invalid_properties[] = "'name_first' can't be null";
        }
        if ($this->container['name_last'] === null) {
            $invalid_properties[] = "'name_last' can't be null";
        }
        if ($this->container['email'] === null) {
            $invalid_properties[] = "'email' can't be null";
        }
        if ($this->container['phone'] === null) {
            $invalid_properties[] = "'phone' can't be null";
        }
        if ($this->container['address_mailing'] === null) {
            $invalid_properties[] = "'address_mailing' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['name_first'] === null) {
            return false;
        }
        if ($this->container['name_last'] === null) {
            return false;
        }
        if ($this->container['email'] === null) {
            return false;
        }
        if ($this->container['phone'] === null) {
            return false;
        }
        if ($this->container['address_mailing'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets name_first
     * @return string
     */
    public function getNameFirst()
    {
        return $this->container['name_first'];
    }

    /**
     * Sets name_first
     * @param string $name_first
     * @return $this
     */
    public function setNameFirst($name_first)
    {
        $this->container['name_first'] = $name_first;

        return $this;
    }

    /**
     * Gets name_middle
     * @return string
     */
    public function getNameMiddle()
    {
        return $this->container['name_middle'];
    }

    /**
     * Sets name_middle
     * @param string $name_middle
     * @return $this
     */
    public function setNameMiddle($name_middle)
    {
        $this->container['name_middle'] = $name_middle;

        return $this;
    }

    /**
     * Gets name_last
     * @return string
     */
    public function getNameLast()
    {
        return $this->container['name_last'];
    }

    /**
     * Sets name_last
     * @param string $name_last
     * @return $this
     */
    public function setNameLast($name_last)
    {
        $this->container['name_last'] = $name_last;

        return $this;
    }

    /**
     * Gets organization
     * @return string
     */
    public function getOrganization()
    {
        return $this->container['organization'];
    }

    /**
     * Sets organization
     * @param string $organization
     * @return $this
     */
    public function setOrganization($organization)
    {
        $this->container['organization'] = $organization;

        return $this;
    }

    /**
     * Gets job_title
     * @return string
     */
    public function getJobTitle()
    {
        return $this->container['job_title'];
    }

    /**
     * Sets job_title
     * @param string $job_title
     * @return $this
     */
    public function setJobTitle($job_title)
    {
        $this->container['job_title'] = $job_title;

        return $this;
    }

    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     * @param string $email
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets phone
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     * @param string $phone
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets fax
     * @return string
     */
    public function getFax()
    {
        return $this->container['fax'];
    }

    /**
     * Sets fax
     * @param string $fax
     * @return $this
     */
    public function setFax($fax)
    {
        $this->container['fax'] = $fax;

        return $this;
    }

    /**
     * Gets address_mailing
     * @return \GoDaddyDomainsClient\Model\Address
     */
    public function getAddressMailing()
    {
        return $this->container['address_mailing'];
    }

    /**
     * Sets address_mailing
     * @param \GoDaddyDomainsClient\Model\Address $address_mailing
     * @return $this
     */
    public function setAddressMailing($address_mailing)
    {
        $this->container['address_mailing'] = $address_mailing;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\GoDaddyDomainsClient\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\GoDaddyDomainsClient\ObjectSerializer::sanitizeForSerialization($this));
    }
}


