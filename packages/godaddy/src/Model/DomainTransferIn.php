<?php
/**
 * DomainTransferIn
 *
 * PHP version 5
 *
 * @category Class
 * @package  GoDaddyDomainsClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.4.8
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace GoDaddyDomainsClient\Model;

use \ArrayAccess;

/**
 * DomainTransferIn Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     GoDaddyDomainsClient
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class DomainTransferIn implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'DomainTransferIn';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'auth_code' => 'string',
        'period' => 'int',
        'renew_auto' => 'bool',
        'privacy' => 'bool',
        'consent' => '\GoDaddyDomainsClient\Model\Consent'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'auth_code' => 'authCode',
        'period' => 'period',
        'renew_auto' => 'renewAuto',
        'privacy' => 'privacy',
        'consent' => 'consent'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'auth_code' => 'setAuthCode',
        'period' => 'setPeriod',
        'renew_auto' => 'setRenewAuto',
        'privacy' => 'setPrivacy',
        'consent' => 'setConsent'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'auth_code' => 'getAuthCode',
        'period' => 'getPeriod',
        'renew_auto' => 'getRenewAuto',
        'privacy' => 'getPrivacy',
        'consent' => 'getConsent'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['auth_code'] = isset($data['auth_code']) ? $data['auth_code'] : null;
        $this->container['period'] = isset($data['period']) ? $data['period'] : null;
        $this->container['renew_auto'] = isset($data['renew_auto']) ? $data['renew_auto'] : null;
        $this->container['privacy'] = isset($data['privacy']) ? $data['privacy'] : null;
        $this->container['consent'] = isset($data['consent']) ? $data['consent'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['auth_code'] === null) {
            $invalid_properties[] = "'auth_code' can't be null";
        }
        if (!is_null($this->container['period']) && ($this->container['period'] > 10.0)) {
            $invalid_properties[] = "invalid value for 'period', must be smaller than or equal to 10.0.";
        }

        if (!is_null($this->container['period']) && ($this->container['period'] < 1.0)) {
            $invalid_properties[] = "invalid value for 'period', must be bigger than or equal to 1.0.";
        }

        if ($this->container['consent'] === null) {
            $invalid_properties[] = "'consent' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['auth_code'] === null) {
            return false;
        }
        if ($this->container['period'] > 10.0) {
            return false;
        }
        if ($this->container['period'] < 1.0) {
            return false;
        }
        if ($this->container['consent'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets auth_code
     * @return string
     */
    public function getAuthCode()
    {
        return $this->container['auth_code'];
    }

    /**
     * Sets auth_code
     * @param string $auth_code Authorization code from registrar for transferring a domain
     * @return $this
     */
    public function setAuthCode($auth_code)
    {
        $this->container['auth_code'] = $auth_code;

        return $this;
    }

    /**
     * Gets period
     * @return int
     */
    public function getPeriod()
    {
        return $this->container['period'];
    }

    /**
     * Sets period
     * @param int $period Can be more than 1 but no more than 10 years total including current registration length
     * @return $this
     */
    public function setPeriod($period)
    {

        if ($period > 10.0) {
            throw new \InvalidArgumentException('invalid value for $period when calling DomainTransferIn., must be smaller than or equal to 10.0.');
        }
        if ($period < 1.0) {
            throw new \InvalidArgumentException('invalid value for $period when calling DomainTransferIn., must be bigger than or equal to 1.0.');
        }
        $this->container['period'] = $period;

        return $this;
    }

    /**
     * Gets renew_auto
     * @return bool
     */
    public function getRenewAuto()
    {
        return $this->container['renew_auto'];
    }

    /**
     * Sets renew_auto
     * @param bool $renew_auto Whether or not the domain should be configured to automatically renew
     * @return $this
     */
    public function setRenewAuto($renew_auto)
    {
        $this->container['renew_auto'] = $renew_auto;

        return $this;
    }

    /**
     * Gets privacy
     * @return bool
     */
    public function getPrivacy()
    {
        return $this->container['privacy'];
    }

    /**
     * Sets privacy
     * @param bool $privacy Whether or not privacy has been requested
     * @return $this
     */
    public function setPrivacy($privacy)
    {
        $this->container['privacy'] = $privacy;

        return $this;
    }

    /**
     * Gets consent
     * @return \GoDaddyDomainsClient\Model\Consent
     */
    public function getConsent()
    {
        return $this->container['consent'];
    }

    /**
     * Sets consent
     * @param \GoDaddyDomainsClient\Model\Consent $consent Required agreements can be retrieved via the GET ./domains/agreements endpoint
     * @return $this
     */
    public function setConsent($consent)
    {
        $this->container['consent'] = $consent;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\GoDaddyDomainsClient\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\GoDaddyDomainsClient\ObjectSerializer::sanitizeForSerialization($this));
    }
}


