<?php
/**
 * DomainContacts
 *
 * PHP version 5
 *
 * @category Class
 * @package  GoDaddyDomainsClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.4.8
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace GoDaddyDomainsClient\Model;

use \ArrayAccess;

/**
 * DomainContacts Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     GoDaddyDomainsClient
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class DomainContacts implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'DomainContacts';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'contact_registrant' => '\GoDaddyDomainsClient\Model\Contact',
        'contact_admin' => '\GoDaddyDomainsClient\Model\Contact',
        'contact_tech' => '\GoDaddyDomainsClient\Model\Contact',
        'contact_billing' => '\GoDaddyDomainsClient\Model\Contact'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'contact_registrant' => 'contactRegistrant',
        'contact_admin' => 'contactAdmin',
        'contact_tech' => 'contactTech',
        'contact_billing' => 'contactBilling'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'contact_registrant' => 'setContactRegistrant',
        'contact_admin' => 'setContactAdmin',
        'contact_tech' => 'setContactTech',
        'contact_billing' => 'setContactBilling'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'contact_registrant' => 'getContactRegistrant',
        'contact_admin' => 'getContactAdmin',
        'contact_tech' => 'getContactTech',
        'contact_billing' => 'getContactBilling'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['contact_registrant'] = isset($data['contact_registrant']) ? $data['contact_registrant'] : null;
        $this->container['contact_admin'] = isset($data['contact_admin']) ? $data['contact_admin'] : null;
        $this->container['contact_tech'] = isset($data['contact_tech']) ? $data['contact_tech'] : null;
        $this->container['contact_billing'] = isset($data['contact_billing']) ? $data['contact_billing'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['contact_registrant'] === null) {
            $invalid_properties[] = "'contact_registrant' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['contact_registrant'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets contact_registrant
     * @return \GoDaddyDomainsClient\Model\Contact
     */
    public function getContactRegistrant()
    {
        return $this->container['contact_registrant'];
    }

    /**
     * Sets contact_registrant
     * @param \GoDaddyDomainsClient\Model\Contact $contact_registrant
     * @return $this
     */
    public function setContactRegistrant($contact_registrant)
    {
        $this->container['contact_registrant'] = $contact_registrant;

        return $this;
    }

    /**
     * Gets contact_admin
     * @return \GoDaddyDomainsClient\Model\Contact
     */
    public function getContactAdmin()
    {
        return $this->container['contact_admin'];
    }

    /**
     * Sets contact_admin
     * @param \GoDaddyDomainsClient\Model\Contact $contact_admin
     * @return $this
     */
    public function setContactAdmin($contact_admin)
    {
        $this->container['contact_admin'] = $contact_admin;

        return $this;
    }

    /**
     * Gets contact_tech
     * @return \GoDaddyDomainsClient\Model\Contact
     */
    public function getContactTech()
    {
        return $this->container['contact_tech'];
    }

    /**
     * Sets contact_tech
     * @param \GoDaddyDomainsClient\Model\Contact $contact_tech
     * @return $this
     */
    public function setContactTech($contact_tech)
    {
        $this->container['contact_tech'] = $contact_tech;

        return $this;
    }

    /**
     * Gets contact_billing
     * @return \GoDaddyDomainsClient\Model\Contact
     */
    public function getContactBilling()
    {
        return $this->container['contact_billing'];
    }

    /**
     * Sets contact_billing
     * @param \GoDaddyDomainsClient\Model\Contact $contact_billing
     * @return $this
     */
    public function setContactBilling($contact_billing)
    {
        $this->container['contact_billing'] = $contact_billing;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\GoDaddyDomainsClient\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\GoDaddyDomainsClient\ObjectSerializer::sanitizeForSerialization($this));
    }
}


